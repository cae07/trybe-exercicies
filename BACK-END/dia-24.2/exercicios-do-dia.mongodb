// Exercício 1: Adicione a categoria "superhero" ao filme Batman .
use('class');
db.movies.updateOne(
  { title: "Batman" },
  {
    $addToSet: { category: "superhero" },
  },
);

use('class');
db.movies.findOne({ title: "Batman" });

// Exercício 2: Utilizando o modificador $each , adicione as
// categorias "villain" e "comic-based" ao filme Batman .
use('class');
db.movies.updateOne(
  { title: "Batman" },
  {
    $addToSet: {
      category: {
        $each: ["villain", "comic-based"]
      }
    },
  },
);

use('class');
db.movies.findOne({ title: "Batman" });

// Exercício 3: Remova a categoria "action" do filme Batman .
use('class');
db.movies.updateOne(
  { title: "Batman" },
  {
    $pop: { category: -1 },
  },
);

// Exercício 4: Remova o primeiro elemento do array category
// do filme Batman .
use('class');
db.movies.updateOne(
  { title: "Batman" },
  { $pop: { category: -1 } },
);

// Exercício 5: Remova o último elemento do array category
// do filme Batman
use('class');
db.movies.updateOne(
  { title: "Batman" },
  { $pop: { category: 1 } },
);

use('class');
db.movies.findOne({ title: "Batman" });

// Exercício 6: Adicione o elemento "action" ao array category
// do filme Batman , garantindo que esse valor não se duplique
use('class');
db.movies.updateOne(
  { title: "Batman" },
  { $addToSet: { category: "action" } },
);

// Exercício 7: Adicione a categoria "90's" aos filmes
// Batman e Home Alone .
use('class');
db.movies.updateMany(
  {
    $or: [
      { title: "Batman" },
      { title: "Home Alone" },
    ],
  },
  { $push: { category: "90's" } },
);

use('class');
db.movies.find({ $or: [{ title: "Batman" }, { title: "Home Alone" }] });

// Exercício 8: Crie um array de documentos chamado cast para o filme Home Alone
use('class');
db.movies.updateOne(
  { title: "Home Alone" },
  {
    $push: {
      cast: {
        $each: [
          {
            "actor": "Macaulay Culkin",
            "character": "Kevin"
          },
          {
            "actor": "Joe Pesci",
            "character": "Harry"
          },
          {
            "actor": "Daniel Stern"
          },
        ],
      },
    },
  },
);

use('class');
db.movies.find({ title: "Home Alone" });

// Exercício 9: Adicione o campo character com o valor Marv ao array de cast
// em que o campo actor seja igual a Daniel Stern no filme Home Alone .
use('class');
db.movies.updateOne(
  { title: "Home Alone", "cast.actor": "Daniel Stern" },
  { $set: { "cast.$.character": "Marv" } },
  // add "$" para dizer que quando chegar na posição do array
  // em que o filtro seja cast.actor = daniel stern, para setar o "marv"
);

// Exercício 10: Crie um array de documentos chamado cast
// para o filme Batman com os seguintes dados:
use('class');
db.movies.updateOne(
  { title: "Batman" },
  { $set: { cast: [
    { "character": "Batman" },
    { "character": "Alfred" },
    { "character": "Coringa" }
  ] } },
);

use('class');
db.movies.find({ title: "Batman" });

// Exercício 11: Produza três querys para o filme Batman :
// - Adicione o campo actor , que deve ser um array com o valor
// Christian Bale , ao array de cast em que o campo character
// seja igual a Batman ;
use('class');
db.movies.updateOne(
  { title: "Batman", "cast.character": "Batman" },
  // para alterar onde o array.chave = Batman, mas não sei a posiçao
  { $set: { "cast.$.actor": "Christian Bale" } }
  // add "$" para dizer que na posiçao do filtro é para setar
);

// - Adicione o campo actor , que deve ser um array com o valor
// Michael Caine , ao array de cast em que o campo character seja
// igual a Alfred ;
// - Adicione o campo actor , que deve ser um array com o valor
// Heath Ledger , ao array de cast em que o campo character seja
// igual a Coringa .