// Exercício 1: Utilizando o estágio $match , escreva uma agregação
// para retornar somente os clientes do sexo "MASCULINO" .
use('erp');
db.clientes.aggregate([
  { $match: { sexo: "MASCULINO" } },
]);

// Exercício 2: Utilizando o estágio $match , escreva uma agregação
// para retornar somente os clientes do sexo "FEMININO" e com data
// de nascimento entre os anos de 1995 e 2005.
use('erp');
db.clientes.aggregate([
  { $match: {
    sexo: "FEMININO",
    "dataNascimento": {
      $gte: new Date("1995-01-01T00:00:00Z"),
      $lte: new Date("2005-01-01T00:00:00Z"),
    },
  } },
  { $sort: { "dataNascimento": 1 } },
  // Bonus particular, ordene por data
]);

// Exercício 3: Utilizando o estágio $match , escreva uma agregação
// para retornar somente os clientes do sexo "FEMININO" e com data
// de nascimento entre os anos de 1995 e 2005 , limitando a quantidade
// de documentos retornados em 5.
use('erp'),
db.clientes.aggregate([
  {
    $match: {
      sexo: "FEMININO",
      dataNascimento: {
        $gte: new Date ("1995-01-01T00:00:00Z"), $lte: new Date ("2005-01-01T00:00:00Z"),
      },
    },
  },
  { $limit: 5 },
  { $sort: { nome: 1 } },
  // bonus particular, ordene por nome
]);

// Exercício 4: Conte quantos clientes do estado SC existem na coleção.
// Retorne um documento em que o campo _id contenha a UF e outro
// campo com o total.
use('erp');
db.clientes.aggregate([
  { $match: { "endereco.uf": "SC" } },
  {
    $group: {
      _id: "$endereco.uf",
      total: { $sum: 1 },
    },
  },
]);

// Exercício 5: Agrupe os clientes por sexo . Retorne o total de
// clientes de cada sexo no campo total .
use('erp');
db.clientes.aggregate([
  {
    $group: {
      _id: "$sexo",
      total: { $sum: 1 },
    },
  },
  { $sort: { total: -1 } },
  // bonus particular - ordenar por total decrescente
]);

// Exercício 6: Agrupe os clientes por sexo e uf . Retorne o total
// de clientes de cada sexo no campo total.
use('erp');
db.clientes.aggregate([
  {
    $group: {
      _id: { end: "$endereco.uf", sex: "$sexo" },
      total: { $sum: 1 },
    },
  },
  { $sort: { "_id.end": 1 } },
  // bonus particular - ordene por end
]);

use('erp');
db.clientes.findOne();
// Exercício 7 : Utilizando a mesma agregação do exercício anterior,
// adicione um estágio de projeção para modificar os documentos de
// saída, de forma que se pareçam com o documento a seguir
// (não se importe com a ordem dos campos):
use('erp');
db.clientes.aggregate([
  {
    $group: {
      _id: {
        estado: "$endereco.uf",
        sexo: "$sexo",
      },
      total: { $sum: 1 },
    },
  },
  {
    $project: {
      _id: 0,
      estado: "$_id.estado",
      sexo: "$_id.sexo",
      total: "$total",
    },
  },
]);

// Exercício 8 : Descubra quais são os 5 clientes que
// gastaram o maior valor.
// método mais simples e óbvio
use("erp");
db.vendas.aggregate([
  { $group: {
    _id: "$clienteId",
    count : { $sum: "$valorTotal" },
  } },
  { $sort: { "count": -1 } },
  { $limit: 5 },
]);

// Bônus para aumentar a dificuldade e treinar mais,
// e outra.... vai que não tem o campo totalGasto?????
use("erp");
db.vendas.aggregate([
  { $unwind: "$itens"},
  {
    $group: {
      _id: "$clienteId",
      totalGasto: {
        $sum: {
          $multiply: ["$itens.valorUnitario", "$itens.quantidade"],
        },
      },
    },
  },
  { $sort: { "totalGasto": -1 } },
  { $limit: 5 },
]);

use("erp");
db.vendas.findOne();

// Exercício 9 : Descubra quais são os 10 clientes que
// gastaram o maior valor no ano de 2019 .
use('erp');
db.vendas.aggregate([
  { $match: {
    dataVenda: {
      $gte: new Date ("2019-01-01T00:00:00Z"),
      $lte: new Date ("2019-12-31T23:59:59Z"),
    },
  } },
  { $unwind: "$itens" },
  {
    $group: {
      _id: "$clienteId",
      gastoTotal: {
        $sum: {
          $multiply: ["$itens.valorUnitario", "$itens.quantidade"],
        },
      },
    },
  },
  { $sort: { "gastoTotal": -1 } },
  { $limit: 10 },
]);

// Exercício 10 : Descubra quantos clientes compraram mais de 5 vezes.
// Retorne um documento que contenha somente o campo clientes com
// o total de clientes.
// Dica: O operador $count pode simplificar sua query .
use('erp');
db.vendas.aggregate([
  {
    $group: {
      _id: "$clienteId",
      count: { $sum: 1 },
    },
  },
  { $match: { count: { $gt: 5 } } },
  { $count: "clientes" },
]);

// Exercício 11 : Descubra quantos clientes compraram menos de três
// vezes entre os meses de Janeiro de 2020 e Março de 2020.
use('erp');
db.vendas.aggregate([
  { $match: {
    dataVenda: {
      $gte: new Date ("2020-01-01T00:00:00Z"),
      $lte: new Date ("2020-03-31T23:59:59Z"),
    },
  } },
  {
    $group: {
      _id: "$clienteId",
      total: { $sum: 1 },
    },
  },
  { $match: { "total": { $gte: 3 } } },
  { $count: "totalClients" },
]);

// Exercício 12 : Descubra quais as três uf s que mais compraram no
// ano de 2020 . Retorne os documentos no seguinte formato:
// {
//   "totalVendas": 10,
//   "uf": "SP"
// }
use('erp');
db.vendas.aggregate([
  { $match: { dataVenda: {
    $gte: new Date ("2020-01-01"),
    $lte: new Date ("2020-12-31"),
  } } },
  {
    $lookup: {
      from: "clientes",
      localField: "clienteId",
      foreignField: "clienteId",
      as: "transactionsMade"
    },
  },
  { $group: {
    _id: "$transactionsMade.endereco.uf",
    count: { $sum: 1 },
  } },
  { $sort: { "count": -1 } },
  { $limit: 3 },
  { $unwind: "$_id" },
  {
    $project: {
      _id: 0,
      totalVendas: "$count",
      uf: "$_id",
    },
  },
]);

// Exercício 13 : Encontre qual foi o total de vendas e a média de
// vendas de cada uf no ano de 2019 . Ordene os resultados pelo nome
// da uf . Retorne os documentos no seguinte formato:
// {
//   "uf": "MG",
//   "mediaVendas": 9407.129225352113,
//   "totalVendas": 142
// }
use('erp');
db.vendas.aggregate([
  { $match: { dataVenda: {
    $gte: new Date ("2019-01-01"),
    $lte: new Date ("2019-12-31T23:59:59Z"),
  } } },
  { $lookup: {
    from: "clientes",
    localField: "clienteId",
    foreignField: "clienteId",
    as: "transactionsMade",
  } },
  {
    $group: {
      _id: "$transactionsMade.endereco.uf",
      count: { $sum: 1 },
      media: {
        $avg: {
          $sum: "$valorTotal",
        },
      },
    },
  },
  { $unwind: "$_id" },
  {
    $project: {
      _id: 0,
      uf: "$_id",
      mediaDeVendas: "$media",
      totalVendas: "$count",
    },
  },
]);
