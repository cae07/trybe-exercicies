// collection para exemplo
db.sales.insertMany([
{
  _id: 1,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("2"),
  date: ISODate("2014-03-01T08:00:00Z")
},
{
  _id: 2,
  item: "O Homem e Seus Símbolos",
  price: NumberDecimal("20"),
  quantity: NumberInt("1"),
  date: ISODate("2014-03-01T09:00:00Z")
},
{
  _id: 3,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity: NumberInt( "10"),
  date: ISODate("2014-03-15T09:00:00Z")
},
{
  _id: 4,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity:  NumberInt("20"),
  date: ISODate("2014-04-04T11:21:39.736Z")
},
{
  _id: 5,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("10"),
  date: ISODate("2014-04-04T21:23:13.331Z")
},
{
  _id: 6,
  item:"A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("5" ),
  date: ISODate("2015-06-04T05:08:13Z")
},
{
  _id: 7,
  item: "A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("10"),
  date: ISODate("2015-09-10T08:43:00Z")
},
{
  _id: 8,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("5" ),
  date: ISODate("2016-02-06T20:20:13Z")
}
]);

// Exemplo 1: Contando o número de documentos
db.sales.aggregate([
  {
    $group: {
      _id: "contagemTotal",
      // pode ser o nome que quiser ou apontar para uma chave no "sales" usando $
      count: { $sum: 1 },
      // cria chave count com a soma como valor
    },
  },
]);

// Exemplo 2: Retornando valores distintos
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      // vai agrupar pelo item, não repetindo valores
      count: { $sum: 1 },
      // quantos itens com mesmo valor em $item
    },
  },
]);

// Exemplo 3: Somando valores
// Para saber o valor das vendas, você deve utilizar o operador $sum,
// que, por sua vez, aceita mais modificadores. No exemplo que se
// segue, multiplica-se o valor do campo price pelo valor do campo
// quantity
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      totalSales: {
      // cria chave
        $sum: {
        // especifica que é para somar
          $multiply: ["$price", "$quantity"],
        },
      },
    },
  },
]);

// Exemplo 4: Having (do Mysql), combinando estágios no aggregate
db.sales.aggregate([
  // primeiro estágio
  {
    $group: {
      _id: "$item",
      totalSales: {
        $sum: {
          $multiply: ["$price", "$quantity"],
        },
      },
    },
  },
  // segundo estágio
  {
    $match: { totalSales: { $gte: 100 } },
    // referenciando a chave que criamos no primeiro estágio 
    // e fazendo match para trazer apenas GTE 100
  },
]);

// Exemplo 5: Agrupando por null
db.sales.aggregate([
  {
    $group: {
      _id: null,
      // pega todos os docs
      totalSales: {
      // cria chave
        $sum: { $multiply: ["$price", "$quantity"] },
      // faz a operação
      },
      averageQuantity: { $avg: "$quantity" },
      // cria chave e o valor
      count: { $sum: 1 },
      // cria a chave e o valor
    },
  },
]);